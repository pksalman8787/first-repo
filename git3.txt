//import java.text.*;
//import android.util.Log;


package jack;
import java.lang.String;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.Charset;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;


public final class Utils {

   
    public static final String LOG_TAG = Utils.class.getSimpleName();

    /**
     * Query the USGS dataset and return an {@link Event} object to represent a single earthquake.
     */
    public static Event fetchEarthquakeData(String requestUrl)  {
        // Create URL object
        URL url = createUrl(requestUrl);

        // Perform HTTP request to the URL and receive a JSON response back
        String jsonResponse = null;
        try {
            jsonResponse = makeHttpRequest(url);
        } catch (IOException e) {
      
        }
        
        
        Event earthquake = extractFeatureFromJson(jsonResponse);

        
        return earthquake;
    }

    /**
     * Returns new URL object from the given string URL.
     */
    private static URL createUrl(String stringUrl) {
        URL url = null;
        try {
            url = new URL(stringUrl);
        } catch (MalformedURLException e) {
        }
        return url;
    }

    /**
     * Make an HTTP request to the given URL and return a String as the response.
     */
    private static String makeHttpRequest(URL url) throws IOException {
        String jsonResponse = "";

        // If the URL is null, then return early.
        if (url == null) {
            return jsonResponse;
        }

        HttpURLConnection urlConnection = null;
        InputStream inputStream = null;
        try {
            urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setReadTimeout(10000 /* milliseconds */);
            urlConnection.setConnectTimeout(15000 /* milliseconds */);
            urlConnection.setRequestMethod("GET");
            urlConnection.connect();

            // If the request was successful (response code 200),
            // then read the input stream and parse the response.
            if (urlConnection.getResponseCode() == 200) {
                inputStream = urlConnection.getInputStream();
                jsonResponse = readFromStream(inputStream);
            } else {
            }
        } catch (IOException e) {
        } finally {
            if (urlConnection != null) {
                urlConnection.disconnect();
            }
            if (inputStream != null) {
                inputStream.close();
            }
        }
        return jsonResponse;
    }

    
    private static String readFromStream(InputStream inputStream) throws IOException {
        StringBuilder output = new StringBuilder();
        if (inputStream != null) {
            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, Charset.forName("UTF-8"));
            BufferedReader reader = new BufferedReader(inputStreamReader);
            String line = reader.readLine();
            while (line != null) {
                output.append(line);
                line = reader.readLine();
            }
        }
        return output.toString();
    }

    /**
     * Return an {@link Event} object by parsing out information
     * about the first earthquake from the input earthquakeJSON string.
     */
    @SuppressWarnings("empty-statement")
    private static Event extractFeatureFromJson(String earthquakeJSON) {
        int i=0;
        int j=0;
        int count=0;
        String t2,t3="nnn";
        String a[]=new String[400];
        String t1="nthg";
        if (/*TextUtils.isEmpty(earthquakeJSON)*/earthquakeJSON.equals(null)) {
            return null;
        }
        try{
        JSONObject baseJsonResponse = new JSONObject(earthquakeJSON);
        //count=4;
        JSONArray resultArray = baseJsonResponse.getJSONArray("results");
        //count=resultArray.length();
        //count=resultArray.length();
        // If there are results in the features array
        //if (featureArray.length()>0) {
            // Extract out the first feature (which is an earthquake)
        for(i=0;i<resultArray.length();i++){
        JSONObject firstFeature = resultArray.getJSONObject(i);
           // JSONObject properties = firstFeature.getJSONObject("properties");
           // String title = properties.getString("title");
           // int f = properties.getInt("felt");
            //String numberOfPeople=Integer.toString(f);
            //Double p = properties.getDouble("cdi");
            //String perceivedStrength=Double.toString(p);
        t1=firstFeature.getString("original_language");
            
            if("hi".equals(t1))
            {   
                t2=firstFeature.getString("title");
                a[j]=(t2);
                j++;
                count++;
                t3=firstFeature.getString("poster_path");
            }
                }
            return new Event(count,a,t3);
        }
        catch(JSONException e){
        }
        return null;
    }
}
